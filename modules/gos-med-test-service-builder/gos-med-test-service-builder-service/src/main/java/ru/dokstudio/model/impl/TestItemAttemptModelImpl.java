/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.dokstudio.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import ru.dokstudio.model.TestItemAttempt;
import ru.dokstudio.model.TestItemAttemptModel;
import ru.dokstudio.model.TestItemAttemptSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TestItemAttempt service. Represents a row in the &quot;gmt_TestItemAttempt&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TestItemAttemptModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TestItemAttemptImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TestItemAttemptImpl
 * @see TestItemAttempt
 * @see TestItemAttemptModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TestItemAttemptModelImpl extends BaseModelImpl<TestItemAttempt>
	implements TestItemAttemptModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a test item attempt model instance should use the {@link TestItemAttempt} interface instead.
	 */
	public static final String TABLE_NAME = "gmt_TestItemAttempt";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "attemptId", Types.BIGINT },
			{ "questionId", Types.BIGINT },
			{ "answerId", Types.BIGINT },
			{ "isSuccessAttempt", Types.BOOLEAN },
			{ "attemptDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attemptId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("questionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("answerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isSuccessAttempt", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("attemptDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table gmt_TestItemAttempt (uuid_ VARCHAR(75) null,attemptId LONG not null primary key,questionId LONG,answerId LONG,isSuccessAttempt BOOLEAN,attemptDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table gmt_TestItemAttempt";
	public static final String ORDER_BY_JPQL = " ORDER BY testItemAttempt.attemptId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gmt_TestItemAttempt.attemptId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstudio.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ru.dokstudio.model.TestItemAttempt"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstudio.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ru.dokstudio.model.TestItemAttempt"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ru.dokstudio.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ru.dokstudio.model.TestItemAttempt"),
			true);
	public static final long QUESTIONID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long ATTEMPTID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TestItemAttempt toModel(TestItemAttemptSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TestItemAttempt model = new TestItemAttemptImpl();

		model.setUuid(soapModel.getUuid());
		model.setAttemptId(soapModel.getAttemptId());
		model.setQuestionId(soapModel.getQuestionId());
		model.setAnswerId(soapModel.getAnswerId());
		model.setIsSuccessAttempt(soapModel.getIsSuccessAttempt());
		model.setAttemptDate(soapModel.getAttemptDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TestItemAttempt> toModels(
		TestItemAttemptSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TestItemAttempt> models = new ArrayList<TestItemAttempt>(soapModels.length);

		for (TestItemAttemptSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ru.dokstudio.service.util.ServiceProps.get(
				"lock.expiration.time.ru.dokstudio.model.TestItemAttempt"));

	public TestItemAttemptModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attemptId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttemptId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attemptId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TestItemAttempt.class;
	}

	@Override
	public String getModelClassName() {
		return TestItemAttempt.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("attemptId", getAttemptId());
		attributes.put("questionId", getQuestionId());
		attributes.put("answerId", getAnswerId());
		attributes.put("isSuccessAttempt", getIsSuccessAttempt());
		attributes.put("attemptDate", getAttemptDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long attemptId = (Long)attributes.get("attemptId");

		if (attemptId != null) {
			setAttemptId(attemptId);
		}

		Long questionId = (Long)attributes.get("questionId");

		if (questionId != null) {
			setQuestionId(questionId);
		}

		Long answerId = (Long)attributes.get("answerId");

		if (answerId != null) {
			setAnswerId(answerId);
		}

		Boolean isSuccessAttempt = (Boolean)attributes.get("isSuccessAttempt");

		if (isSuccessAttempt != null) {
			setIsSuccessAttempt(isSuccessAttempt);
		}

		Date attemptDate = (Date)attributes.get("attemptDate");

		if (attemptDate != null) {
			setAttemptDate(attemptDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getAttemptId() {
		return _attemptId;
	}

	@Override
	public void setAttemptId(long attemptId) {
		_attemptId = attemptId;
	}

	@JSON
	@Override
	public long getQuestionId() {
		return _questionId;
	}

	@Override
	public void setQuestionId(long questionId) {
		_columnBitmask |= QUESTIONID_COLUMN_BITMASK;

		if (!_setOriginalQuestionId) {
			_setOriginalQuestionId = true;

			_originalQuestionId = _questionId;
		}

		_questionId = questionId;
	}

	public long getOriginalQuestionId() {
		return _originalQuestionId;
	}

	@JSON
	@Override
	public long getAnswerId() {
		return _answerId;
	}

	@Override
	public void setAnswerId(long answerId) {
		_answerId = answerId;
	}

	@JSON
	@Override
	public boolean getIsSuccessAttempt() {
		return _isSuccessAttempt;
	}

	@JSON
	@Override
	public boolean isIsSuccessAttempt() {
		return _isSuccessAttempt;
	}

	@Override
	public void setIsSuccessAttempt(boolean isSuccessAttempt) {
		_isSuccessAttempt = isSuccessAttempt;
	}

	@JSON
	@Override
	public Date getAttemptDate() {
		return _attemptDate;
	}

	@Override
	public void setAttemptDate(Date attemptDate) {
		_attemptDate = attemptDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TestItemAttempt.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TestItemAttempt toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TestItemAttempt)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TestItemAttemptImpl testItemAttemptImpl = new TestItemAttemptImpl();

		testItemAttemptImpl.setUuid(getUuid());
		testItemAttemptImpl.setAttemptId(getAttemptId());
		testItemAttemptImpl.setQuestionId(getQuestionId());
		testItemAttemptImpl.setAnswerId(getAnswerId());
		testItemAttemptImpl.setIsSuccessAttempt(getIsSuccessAttempt());
		testItemAttemptImpl.setAttemptDate(getAttemptDate());

		testItemAttemptImpl.resetOriginalValues();

		return testItemAttemptImpl;
	}

	@Override
	public int compareTo(TestItemAttempt testItemAttempt) {
		long primaryKey = testItemAttempt.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TestItemAttempt)) {
			return false;
		}

		TestItemAttempt testItemAttempt = (TestItemAttempt)obj;

		long primaryKey = testItemAttempt.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TestItemAttemptModelImpl testItemAttemptModelImpl = this;

		testItemAttemptModelImpl._originalUuid = testItemAttemptModelImpl._uuid;

		testItemAttemptModelImpl._originalQuestionId = testItemAttemptModelImpl._questionId;

		testItemAttemptModelImpl._setOriginalQuestionId = false;

		testItemAttemptModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TestItemAttempt> toCacheModel() {
		TestItemAttemptCacheModel testItemAttemptCacheModel = new TestItemAttemptCacheModel();

		testItemAttemptCacheModel.uuid = getUuid();

		String uuid = testItemAttemptCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			testItemAttemptCacheModel.uuid = null;
		}

		testItemAttemptCacheModel.attemptId = getAttemptId();

		testItemAttemptCacheModel.questionId = getQuestionId();

		testItemAttemptCacheModel.answerId = getAnswerId();

		testItemAttemptCacheModel.isSuccessAttempt = getIsSuccessAttempt();

		Date attemptDate = getAttemptDate();

		if (attemptDate != null) {
			testItemAttemptCacheModel.attemptDate = attemptDate.getTime();
		}
		else {
			testItemAttemptCacheModel.attemptDate = Long.MIN_VALUE;
		}

		return testItemAttemptCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", attemptId=");
		sb.append(getAttemptId());
		sb.append(", questionId=");
		sb.append(getQuestionId());
		sb.append(", answerId=");
		sb.append(getAnswerId());
		sb.append(", isSuccessAttempt=");
		sb.append(getIsSuccessAttempt());
		sb.append(", attemptDate=");
		sb.append(getAttemptDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("ru.dokstudio.model.TestItemAttempt");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attemptId</column-name><column-value><![CDATA[");
		sb.append(getAttemptId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionId</column-name><column-value><![CDATA[");
		sb.append(getQuestionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerId</column-name><column-value><![CDATA[");
		sb.append(getAnswerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isSuccessAttempt</column-name><column-value><![CDATA[");
		sb.append(getIsSuccessAttempt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attemptDate</column-name><column-value><![CDATA[");
		sb.append(getAttemptDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TestItemAttempt.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TestItemAttempt.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _attemptId;
	private long _questionId;
	private long _originalQuestionId;
	private boolean _setOriginalQuestionId;
	private long _answerId;
	private boolean _isSuccessAttempt;
	private Date _attemptDate;
	private long _columnBitmask;
	private TestItemAttempt _escapedModel;
}