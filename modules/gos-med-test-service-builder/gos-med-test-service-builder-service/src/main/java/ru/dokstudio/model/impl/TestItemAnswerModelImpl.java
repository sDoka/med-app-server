/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.dokstudio.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import ru.dokstudio.model.TestItemAnswer;
import ru.dokstudio.model.TestItemAnswerModel;
import ru.dokstudio.model.TestItemAnswerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TestItemAnswer service. Represents a row in the &quot;gmt_TestItemAnswer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TestItemAnswerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TestItemAnswerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TestItemAnswerImpl
 * @see TestItemAnswer
 * @see TestItemAnswerModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TestItemAnswerModelImpl extends BaseModelImpl<TestItemAnswer>
	implements TestItemAnswerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a test item answer model instance should use the {@link TestItemAnswer} interface instead.
	 */
	public static final String TABLE_NAME = "gmt_TestItemAnswer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "answerId", Types.BIGINT },
			{ "questionId", Types.BIGINT },
			{ "answer", Types.VARCHAR },
			{ "isCorrect", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("questionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("answer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isCorrect", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table gmt_TestItemAnswer (uuid_ VARCHAR(75) null,answerId LONG not null primary key,questionId LONG,answer VARCHAR(800) null,isCorrect BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table gmt_TestItemAnswer";
	public static final String ORDER_BY_JPQL = " ORDER BY testItemAnswer.answerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gmt_TestItemAnswer.answerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstudio.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ru.dokstudio.model.TestItemAnswer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstudio.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ru.dokstudio.model.TestItemAnswer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ru.dokstudio.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ru.dokstudio.model.TestItemAnswer"),
			true);
	public static final long QUESTIONID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long ANSWERID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TestItemAnswer toModel(TestItemAnswerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TestItemAnswer model = new TestItemAnswerImpl();

		model.setUuid(soapModel.getUuid());
		model.setAnswerId(soapModel.getAnswerId());
		model.setQuestionId(soapModel.getQuestionId());
		model.setAnswer(soapModel.getAnswer());
		model.setIsCorrect(soapModel.getIsCorrect());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TestItemAnswer> toModels(TestItemAnswerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TestItemAnswer> models = new ArrayList<TestItemAnswer>(soapModels.length);

		for (TestItemAnswerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ru.dokstudio.service.util.ServiceProps.get(
				"lock.expiration.time.ru.dokstudio.model.TestItemAnswer"));

	public TestItemAnswerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _answerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAnswerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _answerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TestItemAnswer.class;
	}

	@Override
	public String getModelClassName() {
		return TestItemAnswer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("answerId", getAnswerId());
		attributes.put("questionId", getQuestionId());
		attributes.put("answer", getAnswer());
		attributes.put("isCorrect", getIsCorrect());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long answerId = (Long)attributes.get("answerId");

		if (answerId != null) {
			setAnswerId(answerId);
		}

		Long questionId = (Long)attributes.get("questionId");

		if (questionId != null) {
			setQuestionId(questionId);
		}

		String answer = (String)attributes.get("answer");

		if (answer != null) {
			setAnswer(answer);
		}

		Boolean isCorrect = (Boolean)attributes.get("isCorrect");

		if (isCorrect != null) {
			setIsCorrect(isCorrect);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getAnswerId() {
		return _answerId;
	}

	@Override
	public void setAnswerId(long answerId) {
		_answerId = answerId;
	}

	@JSON
	@Override
	public long getQuestionId() {
		return _questionId;
	}

	@Override
	public void setQuestionId(long questionId) {
		_columnBitmask |= QUESTIONID_COLUMN_BITMASK;

		if (!_setOriginalQuestionId) {
			_setOriginalQuestionId = true;

			_originalQuestionId = _questionId;
		}

		_questionId = questionId;
	}

	public long getOriginalQuestionId() {
		return _originalQuestionId;
	}

	@JSON
	@Override
	public String getAnswer() {
		if (_answer == null) {
			return StringPool.BLANK;
		}
		else {
			return _answer;
		}
	}

	@Override
	public void setAnswer(String answer) {
		_answer = answer;
	}

	@JSON
	@Override
	public boolean getIsCorrect() {
		return _isCorrect;
	}

	@JSON
	@Override
	public boolean isIsCorrect() {
		return _isCorrect;
	}

	@Override
	public void setIsCorrect(boolean isCorrect) {
		_isCorrect = isCorrect;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TestItemAnswer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TestItemAnswer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TestItemAnswer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TestItemAnswerImpl testItemAnswerImpl = new TestItemAnswerImpl();

		testItemAnswerImpl.setUuid(getUuid());
		testItemAnswerImpl.setAnswerId(getAnswerId());
		testItemAnswerImpl.setQuestionId(getQuestionId());
		testItemAnswerImpl.setAnswer(getAnswer());
		testItemAnswerImpl.setIsCorrect(getIsCorrect());

		testItemAnswerImpl.resetOriginalValues();

		return testItemAnswerImpl;
	}

	@Override
	public int compareTo(TestItemAnswer testItemAnswer) {
		long primaryKey = testItemAnswer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TestItemAnswer)) {
			return false;
		}

		TestItemAnswer testItemAnswer = (TestItemAnswer)obj;

		long primaryKey = testItemAnswer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TestItemAnswerModelImpl testItemAnswerModelImpl = this;

		testItemAnswerModelImpl._originalUuid = testItemAnswerModelImpl._uuid;

		testItemAnswerModelImpl._originalQuestionId = testItemAnswerModelImpl._questionId;

		testItemAnswerModelImpl._setOriginalQuestionId = false;

		testItemAnswerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TestItemAnswer> toCacheModel() {
		TestItemAnswerCacheModel testItemAnswerCacheModel = new TestItemAnswerCacheModel();

		testItemAnswerCacheModel.uuid = getUuid();

		String uuid = testItemAnswerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			testItemAnswerCacheModel.uuid = null;
		}

		testItemAnswerCacheModel.answerId = getAnswerId();

		testItemAnswerCacheModel.questionId = getQuestionId();

		testItemAnswerCacheModel.answer = getAnswer();

		String answer = testItemAnswerCacheModel.answer;

		if ((answer != null) && (answer.length() == 0)) {
			testItemAnswerCacheModel.answer = null;
		}

		testItemAnswerCacheModel.isCorrect = getIsCorrect();

		return testItemAnswerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", answerId=");
		sb.append(getAnswerId());
		sb.append(", questionId=");
		sb.append(getQuestionId());
		sb.append(", answer=");
		sb.append(getAnswer());
		sb.append(", isCorrect=");
		sb.append(getIsCorrect());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("ru.dokstudio.model.TestItemAnswer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerId</column-name><column-value><![CDATA[");
		sb.append(getAnswerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionId</column-name><column-value><![CDATA[");
		sb.append(getQuestionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answer</column-name><column-value><![CDATA[");
		sb.append(getAnswer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isCorrect</column-name><column-value><![CDATA[");
		sb.append(getIsCorrect());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TestItemAnswer.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TestItemAnswer.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _answerId;
	private long _questionId;
	private long _originalQuestionId;
	private boolean _setOriginalQuestionId;
	private String _answer;
	private boolean _isCorrect;
	private long _columnBitmask;
	private TestItemAnswer _escapedModel;
}