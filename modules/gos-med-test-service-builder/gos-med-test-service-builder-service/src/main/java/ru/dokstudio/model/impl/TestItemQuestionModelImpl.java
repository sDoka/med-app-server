/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.dokstudio.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import ru.dokstudio.model.TestItemQuestion;
import ru.dokstudio.model.TestItemQuestionModel;
import ru.dokstudio.model.TestItemQuestionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TestItemQuestion service. Represents a row in the &quot;gmt_TestItemQuestion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TestItemQuestionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TestItemQuestionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TestItemQuestionImpl
 * @see TestItemQuestion
 * @see TestItemQuestionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TestItemQuestionModelImpl extends BaseModelImpl<TestItemQuestion>
	implements TestItemQuestionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a test item question model instance should use the {@link TestItemQuestion} interface instead.
	 */
	public static final String TABLE_NAME = "gmt_TestItemQuestion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "questionId", Types.BIGINT },
			{ "questionNumber", Types.BIGINT },
			{ "question", Types.VARCHAR },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("questionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("questionNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("question", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table gmt_TestItemQuestion (uuid_ VARCHAR(75) null,questionId LONG not null primary key,questionNumber LONG,question VARCHAR(800) null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table gmt_TestItemQuestion";
	public static final String ORDER_BY_JPQL = " ORDER BY testItemQuestion.questionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gmt_TestItemQuestion.questionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstudio.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ru.dokstudio.model.TestItemQuestion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstudio.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ru.dokstudio.model.TestItemQuestion"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ru.dokstudio.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ru.dokstudio.model.TestItemQuestion"),
			true);
	public static final long QUESTIONNUMBER_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long QUESTIONID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TestItemQuestion toModel(TestItemQuestionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TestItemQuestion model = new TestItemQuestionImpl();

		model.setUuid(soapModel.getUuid());
		model.setQuestionId(soapModel.getQuestionId());
		model.setQuestionNumber(soapModel.getQuestionNumber());
		model.setQuestion(soapModel.getQuestion());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TestItemQuestion> toModels(
		TestItemQuestionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TestItemQuestion> models = new ArrayList<TestItemQuestion>(soapModels.length);

		for (TestItemQuestionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ru.dokstudio.service.util.ServiceProps.get(
				"lock.expiration.time.ru.dokstudio.model.TestItemQuestion"));

	public TestItemQuestionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _questionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setQuestionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _questionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TestItemQuestion.class;
	}

	@Override
	public String getModelClassName() {
		return TestItemQuestion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("questionId", getQuestionId());
		attributes.put("questionNumber", getQuestionNumber());
		attributes.put("question", getQuestion());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long questionId = (Long)attributes.get("questionId");

		if (questionId != null) {
			setQuestionId(questionId);
		}

		Long questionNumber = (Long)attributes.get("questionNumber");

		if (questionNumber != null) {
			setQuestionNumber(questionNumber);
		}

		String question = (String)attributes.get("question");

		if (question != null) {
			setQuestion(question);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getQuestionId() {
		return _questionId;
	}

	@Override
	public void setQuestionId(long questionId) {
		_questionId = questionId;
	}

	@JSON
	@Override
	public long getQuestionNumber() {
		return _questionNumber;
	}

	@Override
	public void setQuestionNumber(long questionNumber) {
		_columnBitmask |= QUESTIONNUMBER_COLUMN_BITMASK;

		if (!_setOriginalQuestionNumber) {
			_setOriginalQuestionNumber = true;

			_originalQuestionNumber = _questionNumber;
		}

		_questionNumber = questionNumber;
	}

	public long getOriginalQuestionNumber() {
		return _originalQuestionNumber;
	}

	@JSON
	@Override
	public String getQuestion() {
		if (_question == null) {
			return StringPool.BLANK;
		}
		else {
			return _question;
		}
	}

	@Override
	public void setQuestion(String question) {
		_question = question;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TestItemQuestion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TestItemQuestion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TestItemQuestion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TestItemQuestionImpl testItemQuestionImpl = new TestItemQuestionImpl();

		testItemQuestionImpl.setUuid(getUuid());
		testItemQuestionImpl.setQuestionId(getQuestionId());
		testItemQuestionImpl.setQuestionNumber(getQuestionNumber());
		testItemQuestionImpl.setQuestion(getQuestion());
		testItemQuestionImpl.setModifiedDate(getModifiedDate());

		testItemQuestionImpl.resetOriginalValues();

		return testItemQuestionImpl;
	}

	@Override
	public int compareTo(TestItemQuestion testItemQuestion) {
		long primaryKey = testItemQuestion.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TestItemQuestion)) {
			return false;
		}

		TestItemQuestion testItemQuestion = (TestItemQuestion)obj;

		long primaryKey = testItemQuestion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TestItemQuestionModelImpl testItemQuestionModelImpl = this;

		testItemQuestionModelImpl._originalUuid = testItemQuestionModelImpl._uuid;

		testItemQuestionModelImpl._originalQuestionNumber = testItemQuestionModelImpl._questionNumber;

		testItemQuestionModelImpl._setOriginalQuestionNumber = false;

		testItemQuestionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TestItemQuestion> toCacheModel() {
		TestItemQuestionCacheModel testItemQuestionCacheModel = new TestItemQuestionCacheModel();

		testItemQuestionCacheModel.uuid = getUuid();

		String uuid = testItemQuestionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			testItemQuestionCacheModel.uuid = null;
		}

		testItemQuestionCacheModel.questionId = getQuestionId();

		testItemQuestionCacheModel.questionNumber = getQuestionNumber();

		testItemQuestionCacheModel.question = getQuestion();

		String question = testItemQuestionCacheModel.question;

		if ((question != null) && (question.length() == 0)) {
			testItemQuestionCacheModel.question = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			testItemQuestionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			testItemQuestionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return testItemQuestionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", questionId=");
		sb.append(getQuestionId());
		sb.append(", questionNumber=");
		sb.append(getQuestionNumber());
		sb.append(", question=");
		sb.append(getQuestion());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("ru.dokstudio.model.TestItemQuestion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionId</column-name><column-value><![CDATA[");
		sb.append(getQuestionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionNumber</column-name><column-value><![CDATA[");
		sb.append(getQuestionNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question</column-name><column-value><![CDATA[");
		sb.append(getQuestion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TestItemQuestion.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TestItemQuestion.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _questionId;
	private long _questionNumber;
	private long _originalQuestionNumber;
	private boolean _setOriginalQuestionNumber;
	private String _question;
	private Date _modifiedDate;
	private long _columnBitmask;
	private TestItemQuestion _escapedModel;
}