/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.dokstudio.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import ru.dokstudio.model.TestItemAttempt;

import ru.dokstudio.service.TestItemAttemptLocalService;
import ru.dokstudio.service.persistence.TestItemAnswerPersistence;
import ru.dokstudio.service.persistence.TestItemAttemptPersistence;
import ru.dokstudio.service.persistence.TestItemQuestionPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the test item attempt local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link ru.dokstudio.service.impl.TestItemAttemptLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ru.dokstudio.service.impl.TestItemAttemptLocalServiceImpl
 * @see ru.dokstudio.service.TestItemAttemptLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class TestItemAttemptLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements TestItemAttemptLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link ru.dokstudio.service.TestItemAttemptLocalServiceUtil} to access the test item attempt local service.
	 */

	/**
	 * Adds the test item attempt to the database. Also notifies the appropriate model listeners.
	 *
	 * @param testItemAttempt the test item attempt
	 * @return the test item attempt that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TestItemAttempt addTestItemAttempt(TestItemAttempt testItemAttempt) {
		testItemAttempt.setNew(true);

		return testItemAttemptPersistence.update(testItemAttempt);
	}

	/**
	 * Creates a new test item attempt with the primary key. Does not add the test item attempt to the database.
	 *
	 * @param attemptId the primary key for the new test item attempt
	 * @return the new test item attempt
	 */
	@Override
	public TestItemAttempt createTestItemAttempt(long attemptId) {
		return testItemAttemptPersistence.create(attemptId);
	}

	/**
	 * Deletes the test item attempt with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param attemptId the primary key of the test item attempt
	 * @return the test item attempt that was removed
	 * @throws PortalException if a test item attempt with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TestItemAttempt deleteTestItemAttempt(long attemptId)
		throws PortalException {
		return testItemAttemptPersistence.remove(attemptId);
	}

	/**
	 * Deletes the test item attempt from the database. Also notifies the appropriate model listeners.
	 *
	 * @param testItemAttempt the test item attempt
	 * @return the test item attempt that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TestItemAttempt deleteTestItemAttempt(
		TestItemAttempt testItemAttempt) {
		return testItemAttemptPersistence.remove(testItemAttempt);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(TestItemAttempt.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return testItemAttemptPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ru.dokstudio.model.impl.TestItemAttemptModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return testItemAttemptPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ru.dokstudio.model.impl.TestItemAttemptModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return testItemAttemptPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return testItemAttemptPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return testItemAttemptPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public TestItemAttempt fetchTestItemAttempt(long attemptId) {
		return testItemAttemptPersistence.fetchByPrimaryKey(attemptId);
	}

	/**
	 * Returns the test item attempt with the primary key.
	 *
	 * @param attemptId the primary key of the test item attempt
	 * @return the test item attempt
	 * @throws PortalException if a test item attempt with the primary key could not be found
	 */
	@Override
	public TestItemAttempt getTestItemAttempt(long attemptId)
		throws PortalException {
		return testItemAttemptPersistence.findByPrimaryKey(attemptId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(testItemAttemptLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TestItemAttempt.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("attemptId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(testItemAttemptLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(TestItemAttempt.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("attemptId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(testItemAttemptLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TestItemAttempt.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("attemptId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return testItemAttemptLocalService.deleteTestItemAttempt((TestItemAttempt)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return testItemAttemptPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the test item attempts.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ru.dokstudio.model.impl.TestItemAttemptModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of test item attempts
	 * @param end the upper bound of the range of test item attempts (not inclusive)
	 * @return the range of test item attempts
	 */
	@Override
	public List<TestItemAttempt> getTestItemAttempts(int start, int end) {
		return testItemAttemptPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of test item attempts.
	 *
	 * @return the number of test item attempts
	 */
	@Override
	public int getTestItemAttemptsCount() {
		return testItemAttemptPersistence.countAll();
	}

	/**
	 * Updates the test item attempt in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param testItemAttempt the test item attempt
	 * @return the test item attempt that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TestItemAttempt updateTestItemAttempt(
		TestItemAttempt testItemAttempt) {
		return testItemAttemptPersistence.update(testItemAttempt);
	}

	/**
	 * Returns the test item answer local service.
	 *
	 * @return the test item answer local service
	 */
	public ru.dokstudio.service.TestItemAnswerLocalService getTestItemAnswerLocalService() {
		return testItemAnswerLocalService;
	}

	/**
	 * Sets the test item answer local service.
	 *
	 * @param testItemAnswerLocalService the test item answer local service
	 */
	public void setTestItemAnswerLocalService(
		ru.dokstudio.service.TestItemAnswerLocalService testItemAnswerLocalService) {
		this.testItemAnswerLocalService = testItemAnswerLocalService;
	}

	/**
	 * Returns the test item answer persistence.
	 *
	 * @return the test item answer persistence
	 */
	public TestItemAnswerPersistence getTestItemAnswerPersistence() {
		return testItemAnswerPersistence;
	}

	/**
	 * Sets the test item answer persistence.
	 *
	 * @param testItemAnswerPersistence the test item answer persistence
	 */
	public void setTestItemAnswerPersistence(
		TestItemAnswerPersistence testItemAnswerPersistence) {
		this.testItemAnswerPersistence = testItemAnswerPersistence;
	}

	/**
	 * Returns the test item attempt local service.
	 *
	 * @return the test item attempt local service
	 */
	public TestItemAttemptLocalService getTestItemAttemptLocalService() {
		return testItemAttemptLocalService;
	}

	/**
	 * Sets the test item attempt local service.
	 *
	 * @param testItemAttemptLocalService the test item attempt local service
	 */
	public void setTestItemAttemptLocalService(
		TestItemAttemptLocalService testItemAttemptLocalService) {
		this.testItemAttemptLocalService = testItemAttemptLocalService;
	}

	/**
	 * Returns the test item attempt persistence.
	 *
	 * @return the test item attempt persistence
	 */
	public TestItemAttemptPersistence getTestItemAttemptPersistence() {
		return testItemAttemptPersistence;
	}

	/**
	 * Sets the test item attempt persistence.
	 *
	 * @param testItemAttemptPersistence the test item attempt persistence
	 */
	public void setTestItemAttemptPersistence(
		TestItemAttemptPersistence testItemAttemptPersistence) {
		this.testItemAttemptPersistence = testItemAttemptPersistence;
	}

	/**
	 * Returns the test item question local service.
	 *
	 * @return the test item question local service
	 */
	public ru.dokstudio.service.TestItemQuestionLocalService getTestItemQuestionLocalService() {
		return testItemQuestionLocalService;
	}

	/**
	 * Sets the test item question local service.
	 *
	 * @param testItemQuestionLocalService the test item question local service
	 */
	public void setTestItemQuestionLocalService(
		ru.dokstudio.service.TestItemQuestionLocalService testItemQuestionLocalService) {
		this.testItemQuestionLocalService = testItemQuestionLocalService;
	}

	/**
	 * Returns the test item question persistence.
	 *
	 * @return the test item question persistence
	 */
	public TestItemQuestionPersistence getTestItemQuestionPersistence() {
		return testItemQuestionPersistence;
	}

	/**
	 * Sets the test item question persistence.
	 *
	 * @param testItemQuestionPersistence the test item question persistence
	 */
	public void setTestItemQuestionPersistence(
		TestItemQuestionPersistence testItemQuestionPersistence) {
		this.testItemQuestionPersistence = testItemQuestionPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("ru.dokstudio.model.TestItemAttempt",
			testItemAttemptLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"ru.dokstudio.model.TestItemAttempt");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return TestItemAttemptLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return TestItemAttempt.class;
	}

	protected String getModelClassName() {
		return TestItemAttempt.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = testItemAttemptPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ru.dokstudio.service.TestItemAnswerLocalService.class)
	protected ru.dokstudio.service.TestItemAnswerLocalService testItemAnswerLocalService;
	@BeanReference(type = TestItemAnswerPersistence.class)
	protected TestItemAnswerPersistence testItemAnswerPersistence;
	@BeanReference(type = TestItemAttemptLocalService.class)
	protected TestItemAttemptLocalService testItemAttemptLocalService;
	@BeanReference(type = TestItemAttemptPersistence.class)
	protected TestItemAttemptPersistence testItemAttemptPersistence;
	@BeanReference(type = ru.dokstudio.service.TestItemQuestionLocalService.class)
	protected ru.dokstudio.service.TestItemQuestionLocalService testItemQuestionLocalService;
	@BeanReference(type = TestItemQuestionPersistence.class)
	protected TestItemQuestionPersistence testItemQuestionPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}