/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.dokstrudio.med.srv.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import ru.dokstrudio.med.srv.model.ApplicationAccount;
import ru.dokstrudio.med.srv.model.ApplicationAccountModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ApplicationAccount service. Represents a row in the &quot;med_ApplicationAccount&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ApplicationAccountModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicationAccountImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ApplicationAccountImpl
 * @see ApplicationAccount
 * @see ApplicationAccountModel
 * @generated
 */
@ProviderType
public class ApplicationAccountModelImpl extends BaseModelImpl<ApplicationAccount>
	implements ApplicationAccountModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a application account model instance should use the {@link ApplicationAccount} interface instead.
	 */
	public static final String TABLE_NAME = "med_ApplicationAccount";
	public static final Object[][] TABLE_COLUMNS = {
			{ "accountTypeId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "durationDays", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("accountTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("durationDays", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table med_ApplicationAccount (accountTypeId LONG not null primary key,name VARCHAR(75) null,description VARCHAR(75) null,durationDays LONG)";
	public static final String TABLE_SQL_DROP = "drop table med_ApplicationAccount";
	public static final String ORDER_BY_JPQL = " ORDER BY applicationAccount.accountTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY med_ApplicationAccount.accountTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ru.dokstrudio.med.srv.model.ApplicationAccount"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ru.dokstrudio.med.srv.model.ApplicationAccount"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"lock.expiration.time.ru.dokstrudio.med.srv.model.ApplicationAccount"));

	public ApplicationAccountModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accountTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccountTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accountTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ApplicationAccount.class;
	}

	@Override
	public String getModelClassName() {
		return ApplicationAccount.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("accountTypeId", getAccountTypeId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("durationDays", getDurationDays());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long accountTypeId = (Long)attributes.get("accountTypeId");

		if (accountTypeId != null) {
			setAccountTypeId(accountTypeId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long durationDays = (Long)attributes.get("durationDays");

		if (durationDays != null) {
			setDurationDays(durationDays);
		}
	}

	@Override
	public long getAccountTypeId() {
		return _accountTypeId;
	}

	@Override
	public void setAccountTypeId(long accountTypeId) {
		_accountTypeId = accountTypeId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public long getDurationDays() {
		return _durationDays;
	}

	@Override
	public void setDurationDays(long durationDays) {
		_durationDays = durationDays;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ApplicationAccount.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ApplicationAccount toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ApplicationAccount)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplicationAccountImpl applicationAccountImpl = new ApplicationAccountImpl();

		applicationAccountImpl.setAccountTypeId(getAccountTypeId());
		applicationAccountImpl.setName(getName());
		applicationAccountImpl.setDescription(getDescription());
		applicationAccountImpl.setDurationDays(getDurationDays());

		applicationAccountImpl.resetOriginalValues();

		return applicationAccountImpl;
	}

	@Override
	public int compareTo(ApplicationAccount applicationAccount) {
		long primaryKey = applicationAccount.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ApplicationAccount)) {
			return false;
		}

		ApplicationAccount applicationAccount = (ApplicationAccount)obj;

		long primaryKey = applicationAccount.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ApplicationAccount> toCacheModel() {
		ApplicationAccountCacheModel applicationAccountCacheModel = new ApplicationAccountCacheModel();

		applicationAccountCacheModel.accountTypeId = getAccountTypeId();

		applicationAccountCacheModel.name = getName();

		String name = applicationAccountCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			applicationAccountCacheModel.name = null;
		}

		applicationAccountCacheModel.description = getDescription();

		String description = applicationAccountCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			applicationAccountCacheModel.description = null;
		}

		applicationAccountCacheModel.durationDays = getDurationDays();

		return applicationAccountCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{accountTypeId=");
		sb.append(getAccountTypeId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", durationDays=");
		sb.append(getDurationDays());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("ru.dokstrudio.med.srv.model.ApplicationAccount");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>accountTypeId</column-name><column-value><![CDATA[");
		sb.append(getAccountTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>durationDays</column-name><column-value><![CDATA[");
		sb.append(getDurationDays());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ApplicationAccount.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ApplicationAccount.class
		};
	private long _accountTypeId;
	private String _name;
	private String _description;
	private long _durationDays;
	private ApplicationAccount _escapedModel;
}