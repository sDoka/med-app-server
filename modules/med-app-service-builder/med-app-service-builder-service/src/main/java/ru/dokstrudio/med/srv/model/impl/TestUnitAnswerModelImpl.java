/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.dokstrudio.med.srv.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import ru.dokstrudio.med.srv.model.TestUnitAnswer;
import ru.dokstrudio.med.srv.model.TestUnitAnswerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TestUnitAnswer service. Represents a row in the &quot;med_TestUnitAnswer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TestUnitAnswerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TestUnitAnswerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TestUnitAnswerImpl
 * @see TestUnitAnswer
 * @see TestUnitAnswerModel
 * @generated
 */
@ProviderType
public class TestUnitAnswerModelImpl extends BaseModelImpl<TestUnitAnswer>
	implements TestUnitAnswerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a test unit answer model instance should use the {@link TestUnitAnswer} interface instead.
	 */
	public static final String TABLE_NAME = "med_TestUnitAnswer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "testUnitAnswerId", Types.BIGINT },
			{ "testUnitId", Types.BIGINT },
			{ "answerText", Types.VARCHAR },
			{ "answerType", Types.INTEGER },
			{ "answerDlFileEntryId", Types.BIGINT },
			{ "isCorrent", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("testUnitAnswerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("testUnitId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("answerText", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answerType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("answerDlFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isCorrent", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table med_TestUnitAnswer (testUnitAnswerId LONG not null primary key,testUnitId LONG,answerText VARCHAR(2000) null,answerType INTEGER,answerDlFileEntryId LONG,isCorrent BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table med_TestUnitAnswer";
	public static final String ORDER_BY_JPQL = " ORDER BY testUnitAnswer.testUnitAnswerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY med_TestUnitAnswer.testUnitAnswerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ru.dokstrudio.med.srv.model.TestUnitAnswer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ru.dokstrudio.med.srv.model.TestUnitAnswer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ru.dokstrudio.med.srv.model.TestUnitAnswer"),
			true);
	public static final long TESTUNITID_COLUMN_BITMASK = 1L;
	public static final long TESTUNITANSWERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"lock.expiration.time.ru.dokstrudio.med.srv.model.TestUnitAnswer"));

	public TestUnitAnswerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _testUnitAnswerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTestUnitAnswerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _testUnitAnswerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TestUnitAnswer.class;
	}

	@Override
	public String getModelClassName() {
		return TestUnitAnswer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("testUnitAnswerId", getTestUnitAnswerId());
		attributes.put("testUnitId", getTestUnitId());
		attributes.put("answerText", getAnswerText());
		attributes.put("answerType", getAnswerType());
		attributes.put("answerDlFileEntryId", getAnswerDlFileEntryId());
		attributes.put("isCorrent", getIsCorrent());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long testUnitAnswerId = (Long)attributes.get("testUnitAnswerId");

		if (testUnitAnswerId != null) {
			setTestUnitAnswerId(testUnitAnswerId);
		}

		Long testUnitId = (Long)attributes.get("testUnitId");

		if (testUnitId != null) {
			setTestUnitId(testUnitId);
		}

		String answerText = (String)attributes.get("answerText");

		if (answerText != null) {
			setAnswerText(answerText);
		}

		Integer answerType = (Integer)attributes.get("answerType");

		if (answerType != null) {
			setAnswerType(answerType);
		}

		Long answerDlFileEntryId = (Long)attributes.get("answerDlFileEntryId");

		if (answerDlFileEntryId != null) {
			setAnswerDlFileEntryId(answerDlFileEntryId);
		}

		Boolean isCorrent = (Boolean)attributes.get("isCorrent");

		if (isCorrent != null) {
			setIsCorrent(isCorrent);
		}
	}

	@Override
	public long getTestUnitAnswerId() {
		return _testUnitAnswerId;
	}

	@Override
	public void setTestUnitAnswerId(long testUnitAnswerId) {
		_testUnitAnswerId = testUnitAnswerId;
	}

	@Override
	public long getTestUnitId() {
		return _testUnitId;
	}

	@Override
	public void setTestUnitId(long testUnitId) {
		_columnBitmask |= TESTUNITID_COLUMN_BITMASK;

		if (!_setOriginalTestUnitId) {
			_setOriginalTestUnitId = true;

			_originalTestUnitId = _testUnitId;
		}

		_testUnitId = testUnitId;
	}

	public long getOriginalTestUnitId() {
		return _originalTestUnitId;
	}

	@Override
	public String getAnswerText() {
		if (_answerText == null) {
			return StringPool.BLANK;
		}
		else {
			return _answerText;
		}
	}

	@Override
	public void setAnswerText(String answerText) {
		_answerText = answerText;
	}

	@Override
	public int getAnswerType() {
		return _answerType;
	}

	@Override
	public void setAnswerType(int answerType) {
		_answerType = answerType;
	}

	@Override
	public long getAnswerDlFileEntryId() {
		return _answerDlFileEntryId;
	}

	@Override
	public void setAnswerDlFileEntryId(long answerDlFileEntryId) {
		_answerDlFileEntryId = answerDlFileEntryId;
	}

	@Override
	public boolean getIsCorrent() {
		return _isCorrent;
	}

	@Override
	public boolean isIsCorrent() {
		return _isCorrent;
	}

	@Override
	public void setIsCorrent(boolean isCorrent) {
		_isCorrent = isCorrent;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TestUnitAnswer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TestUnitAnswer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TestUnitAnswer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TestUnitAnswerImpl testUnitAnswerImpl = new TestUnitAnswerImpl();

		testUnitAnswerImpl.setTestUnitAnswerId(getTestUnitAnswerId());
		testUnitAnswerImpl.setTestUnitId(getTestUnitId());
		testUnitAnswerImpl.setAnswerText(getAnswerText());
		testUnitAnswerImpl.setAnswerType(getAnswerType());
		testUnitAnswerImpl.setAnswerDlFileEntryId(getAnswerDlFileEntryId());
		testUnitAnswerImpl.setIsCorrent(getIsCorrent());

		testUnitAnswerImpl.resetOriginalValues();

		return testUnitAnswerImpl;
	}

	@Override
	public int compareTo(TestUnitAnswer testUnitAnswer) {
		long primaryKey = testUnitAnswer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TestUnitAnswer)) {
			return false;
		}

		TestUnitAnswer testUnitAnswer = (TestUnitAnswer)obj;

		long primaryKey = testUnitAnswer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TestUnitAnswerModelImpl testUnitAnswerModelImpl = this;

		testUnitAnswerModelImpl._originalTestUnitId = testUnitAnswerModelImpl._testUnitId;

		testUnitAnswerModelImpl._setOriginalTestUnitId = false;

		testUnitAnswerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TestUnitAnswer> toCacheModel() {
		TestUnitAnswerCacheModel testUnitAnswerCacheModel = new TestUnitAnswerCacheModel();

		testUnitAnswerCacheModel.testUnitAnswerId = getTestUnitAnswerId();

		testUnitAnswerCacheModel.testUnitId = getTestUnitId();

		testUnitAnswerCacheModel.answerText = getAnswerText();

		String answerText = testUnitAnswerCacheModel.answerText;

		if ((answerText != null) && (answerText.length() == 0)) {
			testUnitAnswerCacheModel.answerText = null;
		}

		testUnitAnswerCacheModel.answerType = getAnswerType();

		testUnitAnswerCacheModel.answerDlFileEntryId = getAnswerDlFileEntryId();

		testUnitAnswerCacheModel.isCorrent = getIsCorrent();

		return testUnitAnswerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{testUnitAnswerId=");
		sb.append(getTestUnitAnswerId());
		sb.append(", testUnitId=");
		sb.append(getTestUnitId());
		sb.append(", answerText=");
		sb.append(getAnswerText());
		sb.append(", answerType=");
		sb.append(getAnswerType());
		sb.append(", answerDlFileEntryId=");
		sb.append(getAnswerDlFileEntryId());
		sb.append(", isCorrent=");
		sb.append(getIsCorrent());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("ru.dokstrudio.med.srv.model.TestUnitAnswer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>testUnitAnswerId</column-name><column-value><![CDATA[");
		sb.append(getTestUnitAnswerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testUnitId</column-name><column-value><![CDATA[");
		sb.append(getTestUnitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerText</column-name><column-value><![CDATA[");
		sb.append(getAnswerText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerType</column-name><column-value><![CDATA[");
		sb.append(getAnswerType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerDlFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getAnswerDlFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isCorrent</column-name><column-value><![CDATA[");
		sb.append(getIsCorrent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TestUnitAnswer.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TestUnitAnswer.class
		};
	private long _testUnitAnswerId;
	private long _testUnitId;
	private long _originalTestUnitId;
	private boolean _setOriginalTestUnitId;
	private String _answerText;
	private int _answerType;
	private long _answerDlFileEntryId;
	private boolean _isCorrent;
	private long _columnBitmask;
	private TestUnitAnswer _escapedModel;
}