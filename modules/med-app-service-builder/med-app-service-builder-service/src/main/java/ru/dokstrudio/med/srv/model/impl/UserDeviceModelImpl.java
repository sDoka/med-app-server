/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.dokstrudio.med.srv.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import ru.dokstrudio.med.srv.model.UserDevice;
import ru.dokstrudio.med.srv.model.UserDeviceModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserDevice service. Represents a row in the &quot;med_UserDevice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UserDeviceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserDeviceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserDeviceImpl
 * @see UserDevice
 * @see UserDeviceModel
 * @generated
 */
@ProviderType
public class UserDeviceModelImpl extends BaseModelImpl<UserDevice>
	implements UserDeviceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user device model instance should use the {@link UserDevice} interface instead.
	 */
	public static final String TABLE_NAME = "med_UserDevice";
	public static final Object[][] TABLE_COLUMNS = {
			{ "deviceId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "deviceTypeId", Types.INTEGER },
			{ "deviceKey", Types.VARCHAR },
			{ "operatingSystem", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("deviceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deviceTypeId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("deviceKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operatingSystem", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table med_UserDevice (deviceId LONG not null primary key,userId LONG,deviceTypeId INTEGER,deviceKey VARCHAR(75) null,operatingSystem VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table med_UserDevice";
	public static final String ORDER_BY_JPQL = " ORDER BY userDevice.deviceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY med_UserDevice.deviceId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ru.dokstrudio.med.srv.model.UserDevice"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ru.dokstrudio.med.srv.model.UserDevice"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"lock.expiration.time.ru.dokstrudio.med.srv.model.UserDevice"));

	public UserDeviceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _deviceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDeviceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _deviceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserDevice.class;
	}

	@Override
	public String getModelClassName() {
		return UserDevice.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("deviceId", getDeviceId());
		attributes.put("userId", getUserId());
		attributes.put("deviceTypeId", getDeviceTypeId());
		attributes.put("deviceKey", getDeviceKey());
		attributes.put("operatingSystem", getOperatingSystem());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long deviceId = (Long)attributes.get("deviceId");

		if (deviceId != null) {
			setDeviceId(deviceId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Integer deviceTypeId = (Integer)attributes.get("deviceTypeId");

		if (deviceTypeId != null) {
			setDeviceTypeId(deviceTypeId);
		}

		String deviceKey = (String)attributes.get("deviceKey");

		if (deviceKey != null) {
			setDeviceKey(deviceKey);
		}

		String operatingSystem = (String)attributes.get("operatingSystem");

		if (operatingSystem != null) {
			setOperatingSystem(operatingSystem);
		}
	}

	@Override
	public long getDeviceId() {
		return _deviceId;
	}

	@Override
	public void setDeviceId(long deviceId) {
		_deviceId = deviceId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public int getDeviceTypeId() {
		return _deviceTypeId;
	}

	@Override
	public void setDeviceTypeId(int deviceTypeId) {
		_deviceTypeId = deviceTypeId;
	}

	@Override
	public String getDeviceKey() {
		if (_deviceKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _deviceKey;
		}
	}

	@Override
	public void setDeviceKey(String deviceKey) {
		_deviceKey = deviceKey;
	}

	@Override
	public String getOperatingSystem() {
		if (_operatingSystem == null) {
			return StringPool.BLANK;
		}
		else {
			return _operatingSystem;
		}
	}

	@Override
	public void setOperatingSystem(String operatingSystem) {
		_operatingSystem = operatingSystem;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserDevice.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserDevice toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserDevice)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserDeviceImpl userDeviceImpl = new UserDeviceImpl();

		userDeviceImpl.setDeviceId(getDeviceId());
		userDeviceImpl.setUserId(getUserId());
		userDeviceImpl.setDeviceTypeId(getDeviceTypeId());
		userDeviceImpl.setDeviceKey(getDeviceKey());
		userDeviceImpl.setOperatingSystem(getOperatingSystem());

		userDeviceImpl.resetOriginalValues();

		return userDeviceImpl;
	}

	@Override
	public int compareTo(UserDevice userDevice) {
		long primaryKey = userDevice.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserDevice)) {
			return false;
		}

		UserDevice userDevice = (UserDevice)obj;

		long primaryKey = userDevice.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<UserDevice> toCacheModel() {
		UserDeviceCacheModel userDeviceCacheModel = new UserDeviceCacheModel();

		userDeviceCacheModel.deviceId = getDeviceId();

		userDeviceCacheModel.userId = getUserId();

		userDeviceCacheModel.deviceTypeId = getDeviceTypeId();

		userDeviceCacheModel.deviceKey = getDeviceKey();

		String deviceKey = userDeviceCacheModel.deviceKey;

		if ((deviceKey != null) && (deviceKey.length() == 0)) {
			userDeviceCacheModel.deviceKey = null;
		}

		userDeviceCacheModel.operatingSystem = getOperatingSystem();

		String operatingSystem = userDeviceCacheModel.operatingSystem;

		if ((operatingSystem != null) && (operatingSystem.length() == 0)) {
			userDeviceCacheModel.operatingSystem = null;
		}

		return userDeviceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{deviceId=");
		sb.append(getDeviceId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", deviceTypeId=");
		sb.append(getDeviceTypeId());
		sb.append(", deviceKey=");
		sb.append(getDeviceKey());
		sb.append(", operatingSystem=");
		sb.append(getOperatingSystem());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("ru.dokstrudio.med.srv.model.UserDevice");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>deviceId</column-name><column-value><![CDATA[");
		sb.append(getDeviceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceTypeId</column-name><column-value><![CDATA[");
		sb.append(getDeviceTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceKey</column-name><column-value><![CDATA[");
		sb.append(getDeviceKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>operatingSystem</column-name><column-value><![CDATA[");
		sb.append(getOperatingSystem());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UserDevice.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UserDevice.class
		};
	private long _deviceId;
	private long _userId;
	private int _deviceTypeId;
	private String _deviceKey;
	private String _operatingSystem;
	private UserDevice _escapedModel;
}