/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.dokstrudio.med.srv.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import ru.dokstrudio.med.srv.model.ApplicationUsage;
import ru.dokstrudio.med.srv.model.ApplicationUsageModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ApplicationUsage service. Represents a row in the &quot;med_ApplicationUsage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ApplicationUsageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicationUsageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ApplicationUsageImpl
 * @see ApplicationUsage
 * @see ApplicationUsageModel
 * @generated
 */
@ProviderType
public class ApplicationUsageModelImpl extends BaseModelImpl<ApplicationUsage>
	implements ApplicationUsageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a application usage model instance should use the {@link ApplicationUsage} interface instead.
	 */
	public static final String TABLE_NAME = "med_ApplicationUsage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "applicationUserId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "ipAddress", Types.VARCHAR },
			{ "deviceId", Types.BIGINT },
			{ "actionType", Types.INTEGER },
			{ "actionTime", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("applicationUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ipAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deviceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("actionType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("actionTime", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table med_ApplicationUsage (applicationUserId LONG not null primary key,userId LONG,ipAddress VARCHAR(75) null,deviceId LONG,actionType INTEGER,actionTime DATE null)";
	public static final String TABLE_SQL_DROP = "drop table med_ApplicationUsage";
	public static final String ORDER_BY_JPQL = " ORDER BY applicationUsage.applicationUserId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY med_ApplicationUsage.applicationUserId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ru.dokstrudio.med.srv.model.ApplicationUsage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ru.dokstrudio.med.srv.model.ApplicationUsage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ru.dokstrudio.med.srv.model.ApplicationUsage"),
			true);
	public static final long DEVICEID_COLUMN_BITMASK = 1L;
	public static final long APPLICATIONUSERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ru.dokstrudio.med.srv.service.util.ServiceProps.get(
				"lock.expiration.time.ru.dokstrudio.med.srv.model.ApplicationUsage"));

	public ApplicationUsageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _applicationUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApplicationUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _applicationUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ApplicationUsage.class;
	}

	@Override
	public String getModelClassName() {
		return ApplicationUsage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("applicationUserId", getApplicationUserId());
		attributes.put("userId", getUserId());
		attributes.put("ipAddress", getIpAddress());
		attributes.put("deviceId", getDeviceId());
		attributes.put("actionType", getActionType());
		attributes.put("actionTime", getActionTime());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long applicationUserId = (Long)attributes.get("applicationUserId");

		if (applicationUserId != null) {
			setApplicationUserId(applicationUserId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String ipAddress = (String)attributes.get("ipAddress");

		if (ipAddress != null) {
			setIpAddress(ipAddress);
		}

		Long deviceId = (Long)attributes.get("deviceId");

		if (deviceId != null) {
			setDeviceId(deviceId);
		}

		Integer actionType = (Integer)attributes.get("actionType");

		if (actionType != null) {
			setActionType(actionType);
		}

		Date actionTime = (Date)attributes.get("actionTime");

		if (actionTime != null) {
			setActionTime(actionTime);
		}
	}

	@Override
	public long getApplicationUserId() {
		return _applicationUserId;
	}

	@Override
	public void setApplicationUserId(long applicationUserId) {
		_applicationUserId = applicationUserId;
	}

	@Override
	public String getApplicationUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getApplicationUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setApplicationUserUuid(String applicationUserUuid) {
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		_ipAddress = ipAddress;
	}

	@Override
	public long getDeviceId() {
		return _deviceId;
	}

	@Override
	public void setDeviceId(long deviceId) {
		_columnBitmask |= DEVICEID_COLUMN_BITMASK;

		if (!_setOriginalDeviceId) {
			_setOriginalDeviceId = true;

			_originalDeviceId = _deviceId;
		}

		_deviceId = deviceId;
	}

	public long getOriginalDeviceId() {
		return _originalDeviceId;
	}

	@Override
	public int getActionType() {
		return _actionType;
	}

	@Override
	public void setActionType(int actionType) {
		_actionType = actionType;
	}

	@Override
	public Date getActionTime() {
		return _actionTime;
	}

	@Override
	public void setActionTime(Date actionTime) {
		_actionTime = actionTime;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ApplicationUsage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ApplicationUsage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ApplicationUsage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplicationUsageImpl applicationUsageImpl = new ApplicationUsageImpl();

		applicationUsageImpl.setApplicationUserId(getApplicationUserId());
		applicationUsageImpl.setUserId(getUserId());
		applicationUsageImpl.setIpAddress(getIpAddress());
		applicationUsageImpl.setDeviceId(getDeviceId());
		applicationUsageImpl.setActionType(getActionType());
		applicationUsageImpl.setActionTime(getActionTime());

		applicationUsageImpl.resetOriginalValues();

		return applicationUsageImpl;
	}

	@Override
	public int compareTo(ApplicationUsage applicationUsage) {
		long primaryKey = applicationUsage.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ApplicationUsage)) {
			return false;
		}

		ApplicationUsage applicationUsage = (ApplicationUsage)obj;

		long primaryKey = applicationUsage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ApplicationUsageModelImpl applicationUsageModelImpl = this;

		applicationUsageModelImpl._originalDeviceId = applicationUsageModelImpl._deviceId;

		applicationUsageModelImpl._setOriginalDeviceId = false;

		applicationUsageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ApplicationUsage> toCacheModel() {
		ApplicationUsageCacheModel applicationUsageCacheModel = new ApplicationUsageCacheModel();

		applicationUsageCacheModel.applicationUserId = getApplicationUserId();

		applicationUsageCacheModel.userId = getUserId();

		applicationUsageCacheModel.ipAddress = getIpAddress();

		String ipAddress = applicationUsageCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			applicationUsageCacheModel.ipAddress = null;
		}

		applicationUsageCacheModel.deviceId = getDeviceId();

		applicationUsageCacheModel.actionType = getActionType();

		Date actionTime = getActionTime();

		if (actionTime != null) {
			applicationUsageCacheModel.actionTime = actionTime.getTime();
		}
		else {
			applicationUsageCacheModel.actionTime = Long.MIN_VALUE;
		}

		return applicationUsageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{applicationUserId=");
		sb.append(getApplicationUserId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", ipAddress=");
		sb.append(getIpAddress());
		sb.append(", deviceId=");
		sb.append(getDeviceId());
		sb.append(", actionType=");
		sb.append(getActionType());
		sb.append(", actionTime=");
		sb.append(getActionTime());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("ru.dokstrudio.med.srv.model.ApplicationUsage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>applicationUserId</column-name><column-value><![CDATA[");
		sb.append(getApplicationUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ipAddress</column-name><column-value><![CDATA[");
		sb.append(getIpAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceId</column-name><column-value><![CDATA[");
		sb.append(getDeviceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionType</column-name><column-value><![CDATA[");
		sb.append(getActionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionTime</column-name><column-value><![CDATA[");
		sb.append(getActionTime());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ApplicationUsage.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ApplicationUsage.class
		};
	private long _applicationUserId;
	private long _userId;
	private String _ipAddress;
	private long _deviceId;
	private long _originalDeviceId;
	private boolean _setOriginalDeviceId;
	private int _actionType;
	private Date _actionTime;
	private long _columnBitmask;
	private ApplicationUsage _escapedModel;
}