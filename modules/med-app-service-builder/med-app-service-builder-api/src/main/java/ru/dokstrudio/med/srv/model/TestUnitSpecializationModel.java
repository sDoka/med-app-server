/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.dokstrudio.med.srv.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

/**
 * The base model interface for the TestUnitSpecialization service. Represents a row in the &quot;med_TestUnitSpecialization&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link ru.dokstrudio.med.srv.model.impl.TestUnitSpecializationModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ru.dokstrudio.med.srv.model.impl.TestUnitSpecializationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TestUnitSpecialization
 * @see ru.dokstrudio.med.srv.model.impl.TestUnitSpecializationImpl
 * @see ru.dokstrudio.med.srv.model.impl.TestUnitSpecializationModelImpl
 * @generated
 */
@ProviderType
public interface TestUnitSpecializationModel extends BaseModel<TestUnitSpecialization> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a test unit specialization model instance should use the {@link TestUnitSpecialization} interface instead.
	 */

	/**
	 * Returns the primary key of this test unit specialization.
	 *
	 * @return the primary key of this test unit specialization
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this test unit specialization.
	 *
	 * @param primaryKey the primary key of this test unit specialization
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the specialization ID of this test unit specialization.
	 *
	 * @return the specialization ID of this test unit specialization
	 */
	public long getSpecializationId();

	/**
	 * Sets the specialization ID of this test unit specialization.
	 *
	 * @param specializationId the specialization ID of this test unit specialization
	 */
	public void setSpecializationId(long specializationId);

	/**
	 * Returns the name localization key of this test unit specialization.
	 *
	 * @return the name localization key of this test unit specialization
	 */
	@AutoEscape
	public String getNameLocalizationKey();

	/**
	 * Sets the name localization key of this test unit specialization.
	 *
	 * @param nameLocalizationKey the name localization key of this test unit specialization
	 */
	public void setNameLocalizationKey(String nameLocalizationKey);

	/**
	 * Returns the specialization icon of this test unit specialization.
	 *
	 * @return the specialization icon of this test unit specialization
	 */
	@AutoEscape
	public String getSpecializationIcon();

	/**
	 * Sets the specialization icon of this test unit specialization.
	 *
	 * @param specializationIcon the specialization icon of this test unit specialization
	 */
	public void setSpecializationIcon(String specializationIcon);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(
		ru.dokstrudio.med.srv.model.TestUnitSpecialization testUnitSpecialization);

	@Override
	public int hashCode();

	@Override
	public CacheModel<ru.dokstrudio.med.srv.model.TestUnitSpecialization> toCacheModel();

	@Override
	public ru.dokstrudio.med.srv.model.TestUnitSpecialization toEscapedModel();

	@Override
	public ru.dokstrudio.med.srv.model.TestUnitSpecialization toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}