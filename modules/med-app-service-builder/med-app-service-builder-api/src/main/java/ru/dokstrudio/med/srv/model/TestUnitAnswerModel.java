/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.dokstrudio.med.srv.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

/**
 * The base model interface for the TestUnitAnswer service. Represents a row in the &quot;med_TestUnitAnswer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link ru.dokstrudio.med.srv.model.impl.TestUnitAnswerModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ru.dokstrudio.med.srv.model.impl.TestUnitAnswerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TestUnitAnswer
 * @see ru.dokstrudio.med.srv.model.impl.TestUnitAnswerImpl
 * @see ru.dokstrudio.med.srv.model.impl.TestUnitAnswerModelImpl
 * @generated
 */
@ProviderType
public interface TestUnitAnswerModel extends BaseModel<TestUnitAnswer> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a test unit answer model instance should use the {@link TestUnitAnswer} interface instead.
	 */

	/**
	 * Returns the primary key of this test unit answer.
	 *
	 * @return the primary key of this test unit answer
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this test unit answer.
	 *
	 * @param primaryKey the primary key of this test unit answer
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the test unit answer ID of this test unit answer.
	 *
	 * @return the test unit answer ID of this test unit answer
	 */
	public long getTestUnitAnswerId();

	/**
	 * Sets the test unit answer ID of this test unit answer.
	 *
	 * @param testUnitAnswerId the test unit answer ID of this test unit answer
	 */
	public void setTestUnitAnswerId(long testUnitAnswerId);

	/**
	 * Returns the test unit ID of this test unit answer.
	 *
	 * @return the test unit ID of this test unit answer
	 */
	public long getTestUnitId();

	/**
	 * Sets the test unit ID of this test unit answer.
	 *
	 * @param testUnitId the test unit ID of this test unit answer
	 */
	public void setTestUnitId(long testUnitId);

	/**
	 * Returns the answer text of this test unit answer.
	 *
	 * @return the answer text of this test unit answer
	 */
	@AutoEscape
	public String getAnswerText();

	/**
	 * Sets the answer text of this test unit answer.
	 *
	 * @param answerText the answer text of this test unit answer
	 */
	public void setAnswerText(String answerText);

	/**
	 * Returns the answer type of this test unit answer.
	 *
	 * @return the answer type of this test unit answer
	 */
	public int getAnswerType();

	/**
	 * Sets the answer type of this test unit answer.
	 *
	 * @param answerType the answer type of this test unit answer
	 */
	public void setAnswerType(int answerType);

	/**
	 * Returns the answer dl file entry ID of this test unit answer.
	 *
	 * @return the answer dl file entry ID of this test unit answer
	 */
	public long getAnswerDlFileEntryId();

	/**
	 * Sets the answer dl file entry ID of this test unit answer.
	 *
	 * @param answerDlFileEntryId the answer dl file entry ID of this test unit answer
	 */
	public void setAnswerDlFileEntryId(long answerDlFileEntryId);

	/**
	 * Returns the is corrent of this test unit answer.
	 *
	 * @return the is corrent of this test unit answer
	 */
	public boolean getIsCorrent();

	/**
	 * Returns <code>true</code> if this test unit answer is is corrent.
	 *
	 * @return <code>true</code> if this test unit answer is is corrent; <code>false</code> otherwise
	 */
	public boolean isIsCorrent();

	/**
	 * Sets whether this test unit answer is is corrent.
	 *
	 * @param isCorrent the is corrent of this test unit answer
	 */
	public void setIsCorrent(boolean isCorrent);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(
		ru.dokstrudio.med.srv.model.TestUnitAnswer testUnitAnswer);

	@Override
	public int hashCode();

	@Override
	public CacheModel<ru.dokstrudio.med.srv.model.TestUnitAnswer> toCacheModel();

	@Override
	public ru.dokstrudio.med.srv.model.TestUnitAnswer toEscapedModel();

	@Override
	public ru.dokstrudio.med.srv.model.TestUnitAnswer toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}